# Production
services:
  nginx:
    build: .
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./frontend:/usr/share/nginx/html
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certbot/conf:/etc/letsencrypt:rw  # Make sure certs are mounted here
      - ./certbot/www:/var/www/certbot:rw
    depends_on:
      - frontend
      - backend
    networks:
      - mynetwork
  certbot:
    build:
        context: .
        dockerfile: Dockerfile.certbot  # This is your custom Dockerfile for Certbot
    container_name: certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt:rw
      - ./certbot/www:/var/www/certbot:rw
      - ./nginx.conf:/etc/nginx/nginx.conf:ro  # Ensure NGINX conf is available to Certbot
      - /var/lib/docker/volumes/app_mynetwork_nginx-etc-certificate/_data:/etc/letsencrypt:ro
    environment:
      - CERTBOT_EMAIL=youremail@example.com
      - CERTBOT_DOMAIN=finition108.io
    entrypoint: "/bin/sh -c 'certbot certonly --webroot -w /var/www/certbot -d finition108.io --dry-run'"
    depends_on:
      - nginx
    networks:
      - mynetwork
      
  backend:
    build:
      context: ./backend
    ports:
      - "3001:3001"
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]  # Adjust based on your app's health check
      interval: 30s
      retries: 3
    volumes:
      - ./backend:/app
      - /app/node_modules
    environment:
      - PORT=3001
      - NODE_ENV=production
      - DO_SPACES_KEY=DO003NB89L7TREA74BHW
      - DO_SPACES_SECRET=cTm4w/ahaYGQmqv65x7fVsKBY/DWnIOMT7zvuCRwBvE
      - DO_SPACES_BUCKET=imagery
    restart: always

  frontend:
    build:
      context: ./frontend
    environment:
      - NODE_ENV=production
      - npm_config_platform=linux
      - API_BASE_URL=http://backend:3001  # Update this to the backend service-name:port in docker
    ports:
      - "3000:3000"  # Expose frontend port
    networks:
      - mynetwork
    volumes:
      - ./frontend:/app
      - /app/node_modules
    restart: always

networks:
  mynetwork:
    driver: bridge

    
# services:
#   app:
#     build:
#       context: .
#       dockerfile: Dockerfile
#     ports:
#       - "3000:3000"  # Frontend port
#       - "3001:3001"  # Backend port
#     volumes:
#       - .:/app
#     environment:
#       - NODE_ENV=production
#     restart: always



#services:
# backend:
#  build:
#    context: ./backend
#   ports:
#     - "3001:3000"
#   volumes:
#     - ./backend:/app

# frontend:
#   environment:
#     - npm_config_platform=linux
#   build:
#     context: ./frontend
#   ports:
#     - "3000:3000"
#   volumes:
#     - ./frontend:/app

  # test:
  #   build:
  #     context: ./backend
  #   command: npm test
